generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model User {
  id                    String             @id
  email                 String?            @unique @db.Citext
  name                  String?
  locale                String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  deletedAt             DateTime?
  profileStatus         ProfileStatus      @default(INCOMPLETE)
  collectionMemberships CollectionMember[]
  collections           Collection[]
  samples               Sample[]

  @@map("users")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model Collection {
  id        String             @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  isDeleted Boolean            @default(false)
  members   CollectionMember[]
  samples   CollectionSample[]
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, updatedAt])
  @@map("collections")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model Sample {
  id              String             @id @default(cuid())
  userId          String
  title           String
  materialType    String
  applicationArea String?
  surface         String?
  colorHex        String?            @db.Char(7)
  colorName       String?
  companyName     String?
  priceMinor      Int?
  priceCurrency   String?            @db.Char(3)
  quantityValue   Decimal?           @db.Decimal(10, 2)
  quantityUnit    String?
  sizeText        String?
  locationLat     Decimal?           @db.Decimal(9, 6)
  locationLng     Decimal?           @db.Decimal(9, 6)
  notes           String?
  isDeleted       Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?
  collections     CollectionSample[]
  image           SampleImage?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
  @@index([isDeleted])
  @@map("samples")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model SampleImage {
  id              String    @id @default(cuid())
  sampleId        String    @unique
  storageProvider String
  objectKey       String
  url             String
  width           Int?
  height          Int?
  blurhash        String?
  exif            Json?
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?
  sample          Sample    @relation(fields: [sampleId], references: [id], onDelete: Cascade)

  @@map("sample_images")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model CollectionSample {
  collectionId String
  sampleId     String
  position     Int
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  sample       Sample     @relation(fields: [sampleId], references: [id], onDelete: Cascade)

  @@id([collectionId, sampleId])
  @@index([collectionId, position])
  @@map("collection_samples")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model CollectionMember {
  id           String         @id @default(cuid())
  collectionId String
  userId       String
  role         CollectionRole
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  collection   Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([collectionId, userId], map: "collection_members_collection_id_user_id_key")
  @@index([collectionId, role], map: "collection_members_collection_id_role_idx")
  @@index([userId], map: "collection_members_user_id_idx")
  @@map("collection_members")
}

/// ///////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////
model CleanupTask {
  id          String        @id @default(cuid())
  entityType  CleanupEntity
  entityId    String
  payload     Json?
  status      CleanupStatus @default(PENDING)
  attempts    Int           @default(0)
  scheduledAt DateTime      @default(now())
  lastError   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, scheduledAt])
  @@map("cleanup_tasks")
}

enum ProfileStatus {
  INCOMPLETE
  COMPLETE
}

enum CollectionRole {
  OWNER
  EDITOR
  VIEW_ONLY
}

enum CleanupEntity {
  SAMPLE
  USER
}

enum CleanupStatus {
  PENDING
  RUNNING
  FAILED
  COMPLETED
}
